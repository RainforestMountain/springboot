package com.example.lotterysystem.common.errorcode;

import lombok.Data;

/**
 * 错误码对象 ,这里主要是业务错误码
 *
 * HTTP 错误码（属于网络协议层）
 * 是 HTTP 协议中预定义的状态码，用于表示客户端与服务器之间通信的状态，属于网络传输层的标准规范。
 * 例如：
 * 200 OK：请求成功；
 * 404 Not Found：服务器找不到请求的资源；
 * 500 Internal Server Error：服务器内部错误。
 * 核心作用：描述网络请求的 “通信结果”，不涉及具体业务逻辑。
 * <p>
 * 业务错误码（属于应用逻辑层）
 * 是开发者根据业务需求自定义的错误码，用于表示系统内部业务逻辑执行失败的原因，属于应用层的自定义规范。
 * 例如：
 * 1001：用户未登录；
 * 2003：商品库存不足；
 * 3002：订单已取消。
 * 核心作用：描述业务逻辑的 “执行结果”，与具体功能场景强相关。
 *
 * 四、实际应用中的结合方式
 * HTTP 状态码表示 “通信是否成功”：
 * 无论业务是否成功，先通过 HTTP 状态码告知客户端 “请求是否被服务器正常接收和处理”。例如：
 * 业务成功时，HTTP 状态码为200 OK，返回业务数据；
 * 业务失败时，HTTP 状态码可能为200 OK（部分设计）或4xx/5xx（根据错误性质），同时在响应体中携带业务错误码。
 * 业务错误码表示 “具体失败原因”：
 * 即使 HTTP 状态码为200 OK，若业务逻辑执行失败（如 “余额不足”），
 * 仍需在响应中通过自定义错误码（如3001）说明问题，便于客户端处理（如提示用户充值）。
 *
 * 五、总结：两者的本质差异
 * HTTP 错误码：是网络通信的 “通用语言”，解决 “请求是否可达、服务器是否正常响应” 的问题；
 * 业务错误码：是业务系统的 “自定义语言”，解决 “具体业务为什么失败、如何处理” 的问题。
 */
@Data
public class ErrorCode {
    /**
     * 错误码
     */
    private final Integer code;

    /**
     * 错误提示
     */
    private final String msg;

    /**
     * 全参构造
     */
    public ErrorCode(Integer code, String message) {
        this.code = code;
        this.msg = message;
    }
}
